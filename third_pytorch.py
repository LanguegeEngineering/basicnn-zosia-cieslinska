# -*- coding: utf-8 -*-
"""third_pytorch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xXA8IX3wp8YxiZ87Mn1K4VPj_W03pgrJ
"""

import torch
import numpy as np

dtype = torch.float
device = torch.device("cpu")

N, D_in, H, D_out = 16, 4, 3, 1

# Create random input and output data

x_numpy = np.array(    [[0., 0., 0., 1.],
                        [1., 0., 0., 1.],
                        [0., 1., 0., 1.],
                        [0., 0., 1., 1.],
                        [1., 1., 0., 1.],
                        [1., 0., 1., 1.],
                        [0., 1., 1., 1.],
                        [1., 1., 1., 1.],
                        [0., 0., 0., 0.],
                        [1., 0., 0., 0.],
                        [0., 1., 0., 0.],
                        [0., 0., 1., 0.],
                        [1., 1., 0., 0.],
                        [1., 0., 1., 0.],
                        [0., 1., 1., 0.],
                        [1., 1., 1., 0.]])

x = torch.from_numpy(x_numpy).float()
print(x)

y_numpy = np.array(     [[0.],
                         [0.],
                         [1.],
                         [1.],
                         [1.],
                         [1.],
                         [1.],
                         [1.],
                         [0.],
                         [0.],
                         [0.],
                         [0.],
                         [0.],
                         [0.],
                         [1.],
                         [1.]])

y = torch.from_numpy(y_numpy).float()

model = torch.nn.Sequential(
    torch.nn.Linear(D_in, D_out)
)
loss_fn = torch.nn.MSELoss(reduction='sum')
learning_rate = 1e-3
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

loss_list = []
for t in range(5):
    y_pred = model(x)
    loss = loss_fn(y_pred, y)
    loss_list.append(loss.item())

    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

import matplotlib.pyplot as plt

plt.plot(loss_list, label = 'loss')
plt.legend()
plt.show()
print(loss_list[-1])

